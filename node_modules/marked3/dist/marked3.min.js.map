{"version":3,"file":"marked3.min.js","sources":["../src/utils.js","../node_modules/slugo/dist/slugo.js","../src/renderer.js","../src/defaults.js","../src/inline-rules.js","../src/inline-lexer.js","../src/parser.js","../src/block-rules.js","../src/lexer.js","../src/index.js"],"sourcesContent":["function merge(obj) {\n  let i = 1\n  let target\n  let key\n\n  for (; i < arguments.length; i++) {\n    target = arguments[i]\n    for (key in target) {\n      if (Object.prototype.hasOwnProperty.call(target, key)) {\n        obj[key] = target[key]\n      }\n    }\n  }\n\n  return obj\n}\n\nfunction noop() {}\nnoop.exec = noop\n\nfunction escape(html, encode) {\n  return html\n    .replace(encode ? /&/g : /&(?!#?\\w+;)/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#39;')\n}\n\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(/&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/g, (_, n) => {\n    n = n.toLowerCase()\n    if (n === 'colon') return ':'\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(Number(n.substring(1)))\n    }\n    return ''\n  })\n}\n\nfunction replace(regex, opt) {\n  regex = regex.source\n  opt = opt || ''\n  return function self(name, val) {\n    if (!name) return new RegExp(regex, opt)\n    val = val.source || val\n    val = val.replace(/(^|[^\\[])\\^/g, '$1')\n    regex = regex.replace(name, val)\n    return self\n  }\n}\n\nexport { merge, noop, escape, unescape, replace }\n","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global.slugo = factory());\n}(this, (function () { 'use strict';\n\nvar index = function (input) {\n  return input\n    // Remove html tags\n    .replace(/<(?:.|\\n)*?>/gm, '')\n    // Remove special characters\n    .replace(/[!\\\"#$%&'\\(\\)\\*\\+,\\/:;<=>\\?\\@\\[\\\\\\]\\^`\\{\\|\\}~]/g, '') // eslint-disable-line no-useless-escape\n    // Replace dots and spaces with a sepeator\n    .replace(/(\\s|\\.)/g, '-')\n    // Make the whole thing lowercase\n    .toLowerCase()\n};\n\nreturn index;\n\n})));\n","import slugo from 'slugo'\nimport { escape, unescape } from './utils'\n\nexport default class Renderer {\n  constructor(options) {\n    this.options = options || {}\n    this._headings = []\n  }\n\n  code(code, lang, escaped) {\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang)\n      if (out !== null && out !== code) {\n        escaped = true\n        code = out\n      }\n    }\n\n    if (!lang) {\n      return `<pre><code>${escaped ? code : escape(code, true)}\\n</code></pre>`\n    }\n\n    return `<pre><code class=\"${this.options.langPrefix}${escape(\n      lang,\n      true\n    )}\">${escaped ? code : escape(code, true)}\\n</code></pre>\\n`\n  }\n\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`\n  }\n\n  html(html) {\n    return html\n  }\n\n  heading(text, level, raw) {\n    let slug = slugo(raw)\n    const count = this._headings.filter(h => h === raw).length\n    if (count > 0) {\n      slug += `-${count}`\n    }\n    this._headings.push(raw)\n    return `<h${level} id=\"${this.options\n      .headerPrefix}${slug}\">${text}</h${level}>\\n`\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n'\n  }\n\n  list(body, ordered, taskList) {\n    const type = ordered ? 'ol' : 'ul'\n    const classNames = taskList ? ' class=\"task-list\"' : ''\n    return `<${type}${classNames}>\\n${body}</${type}>\\n`\n  }\n\n  listitem(text, checked) {\n    if (checked === undefined) {\n      return `<li>${text}</li>\\n`\n    }\n\n    return (\n      '<li class=\"task-list-item\">' +\n      '<input type=\"checkbox\" class=\"task-list-item-checkbox\"' +\n      (checked ? ' checked' : '') +\n      '> ' +\n      text +\n      '</li>\\n'\n    )\n  }\n\n  paragraph(text) {\n    return `<p>${text}</p>\\n`\n  }\n\n  table(header, body) {\n    return `<table>\\n<thead>\\n${header}</thead>\\n<tbody>\\n${body}</tbody>\\n</table>\\n`\n  }\n\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td'\n    const tag = flags.align\n      ? `<${type} style=\"text-align:${flags.align}\">`\n      : `<${type}>`\n    return `${tag + content}</${type}>\\n`\n  }\n\n  // span level renderer\n  strong(text) {\n    return `<strong>${text}</strong>`\n  }\n\n  em(text) {\n    return `<em>${text}</em>`\n  }\n\n  codespan(text) {\n    return `<code>${text}</code>`\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>'\n  }\n\n  del(text) {\n    return `<del>${text}</del>`\n  }\n\n  link(href, title, text) {\n    if (this.options.sanitize) {\n      let prot\n      try {\n        prot = decodeURIComponent(unescape(href))\n          .replace(/[^\\w:]/g, '')\n          .toLowerCase()\n      } catch (err) {\n        return ''\n      }\n      if (\n        // eslint-disable-next-line no-script-url\n        prot.indexOf('javascript:') === 0 ||\n        prot.indexOf('vbscript:') === 0 ||\n        prot.indexOf('data:') === 0\n      ) {\n        // eslint-disable-line no-script-url\n        return ''\n      }\n    }\n    let out = `<a href=\"${href}\"`\n    if (title) {\n      out += ` title=\"${title}\"`\n    }\n    const { linksInNewTab } = this.options\n    const targetBlank =\n      linksInNewTab === true ||\n      (typeof linksInNewTab === 'function' && linksInNewTab(href))\n    if (targetBlank) {\n      out += ` target=\"_blank\"`\n    }\n    out += `>${text}</a>`\n    return out\n  }\n\n  image(href, title, text) {\n    let out = `<img src=\"${href}\" alt=\"${text}\"`\n    if (title) {\n      out += ` title=\"${title}\"`\n    }\n    out += this.options.xhtml ? '/>' : '>'\n    return out\n  }\n\n  text(text) {\n    return text\n  }\n}\n","import Renderer from './renderer'\n\nexport default {\n  gfm: true,\n  tables: true,\n  taskLists: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: false,\n  sanitizer: null,\n  mangle: true,\n  smartLists: false,\n  silent: false,\n  highlight: null,\n  langPrefix: 'lang-',\n  smartypants: false,\n  headerPrefix: '',\n  renderer: new Renderer(),\n  xhtml: false\n}\n","import { noop, merge, replace } from './utils'\n\n/**\n * Inline-Level Grammar\n */\n\nconst inline = {\n  escape: /^\\\\([\\\\`*{}[\\]()#+\\-.!_>])/,\n  autolink: /^<([^ >]+(@|:\\/)[^ >]+)>/,\n  url: noop,\n  tag: /^<!--[\\s\\S]*?-->|^<\\/?\\w+(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/,\n  link: /^!?\\[(inside)\\]\\(href\\)/,\n  reflink: /^!?\\[(inside)\\]\\s*\\[([^\\]]*)\\]/,\n  nolink: /^!?\\[((?:\\[[^\\]]*\\]|[^[\\]])*)\\]/,\n  strong: /^__([\\s\\S]+?)__(?!_)|^\\*\\*([\\s\\S]+?)\\*\\*(?!\\*)/,\n  em: /^\\b_((?:[^_]|__)+?)_\\b|^\\*((?:\\*\\*|[\\s\\S])+?)\\*(?!\\*)/,\n  code: /^(`+)\\s*([\\s\\S]*?[^`])\\s*\\1(?!`)/,\n  br: /^ {2,}\\n(?!\\s*$)/,\n  del: noop,\n  text: /^[\\s\\S]+?(?=[\\\\<![_*`]| {2,}\\n|$)/\n}\n\ninline._inside = /(?:\\[[^\\]]*\\]|[^[\\]]|\\](?=[^[]*\\]))*/\ninline._href = /\\s*<?([\\s\\S]*?)>?(?:\\s+['\"]([\\s\\S]*?)['\"])?\\s*/\n\ninline.link = replace(inline.link)('inside', inline._inside)(\n  'href',\n  inline._href\n)()\n\ninline.reflink = replace(inline.reflink)('inside', inline._inside)()\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = merge({}, inline)\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = merge({}, inline.normal, {\n  strong: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n  em: /^_(?=\\S)([\\s\\S]*?\\S)_(?!_)|^\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)/\n})\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = merge({}, inline.normal, {\n  escape: replace(inline.escape)('])', '~|])')(),\n  url: /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/,\n  del: /^~~(?=\\S)([\\s\\S]*?\\S)~~/,\n  text: replace(inline.text)(']|', '~]|')('|', '|https?://|')()\n})\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = merge({}, inline.gfm, {\n  br: replace(inline.br)('{2,}', '*')(),\n  text: replace(inline.gfm.text)('{2,}', '*')()\n})\n\nexport default inline\n","import defaultOptions from './defaults'\nimport Renderer from './renderer'\nimport inlineRules from './inline-rules'\nimport { escape } from './utils'\n\nclass InlineLexer {\n  constructor(links, options = defaultOptions) {\n    this.options = options\n    this.links = links\n    this.renderer = this.options.renderer || new Renderer()\n    this.renderer.options = this.options\n\n    if (!this.links) {\n      throw new Error('Tokens array requires a `links` property.')\n    }\n\n    if (this.options.gfm) {\n      if (this.options.breaks) {\n        this.rules = inlineRules.breaks\n      } else {\n        this.rules = inlineRules.gfm\n      }\n    } else if (this.options.pedantic) {\n      this.rules = inlineRules.pedantic\n    } else {\n      this.rules = inlineRules.normal\n    }\n  }\n\n  static output(src, links, options) {\n    return new InlineLexer(links, options).output(src)\n  }\n\n  output(src) {\n    let out = ''\n    let link\n    let text\n    let href\n    let cap\n\n    while (src) {\n      // escape\n      if ((cap = this.rules.escape.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += cap[1]\n        continue\n      }\n\n      // autolink\n      if ((cap = this.rules.autolink.exec(src))) {\n        src = src.substring(cap[0].length)\n        if (cap[2] === '@') {\n          text =\n            cap[1].charAt(6) === ':'\n              ? this.mangle(cap[1].substring(7))\n              : this.mangle(cap[1])\n          href = this.mangle('mailto:') + text\n        } else {\n          text = escape(cap[1])\n          href = text\n        }\n        out += this.renderer.link(href, null, text)\n        continue\n      }\n\n      // url (gfm)\n      if (!this.inLink && (cap = this.rules.url.exec(src))) {\n        src = src.substring(cap[0].length)\n        text = escape(cap[1])\n        href = text\n        out += this.renderer.link(href, null, text)\n        continue\n      }\n\n      // tag\n      if ((cap = this.rules.tag.exec(src))) {\n        if (!this.inLink && /^<a /i.test(cap[0])) {\n          this.inLink = true\n        } else if (this.inLink && /^<\\/a>/i.test(cap[0])) {\n          this.inLink = false\n        }\n        src = src.substring(cap[0].length)\n        out += this.options.sanitize\n          ? this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0])\n          : cap[0]\n        continue\n      }\n\n      // link\n      if ((cap = this.rules.link.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.inLink = true\n        out += this.outputLink(cap, {\n          href: cap[2],\n          title: cap[3]\n        })\n        this.inLink = false\n        continue\n      }\n\n      // reflink, nolink\n      if (\n        (cap = this.rules.reflink.exec(src)) ||\n        (cap = this.rules.nolink.exec(src))\n      ) {\n        src = src.substring(cap[0].length)\n        link = (cap[2] || cap[1]).replace(/\\s+/g, ' ')\n        link = this.links[link.toLowerCase()]\n        if (!link || !link.href) {\n          out += cap[0].charAt(0)\n          src = cap[0].substring(1) + src\n          continue\n        }\n        this.inLink = true\n        out += this.outputLink(cap, link)\n        this.inLink = false\n        continue\n      }\n\n      // strong\n      if ((cap = this.rules.strong.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += this.renderer.strong(this.output(cap[2] || cap[1]))\n        continue\n      }\n\n      // em\n      if ((cap = this.rules.em.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += this.renderer.em(this.output(cap[2] || cap[1]))\n        continue\n      }\n\n      // code\n      if ((cap = this.rules.code.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += this.renderer.codespan(escape(cap[2], true))\n        continue\n      }\n\n      // br\n      if ((cap = this.rules.br.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += this.renderer.br()\n        continue\n      }\n\n      // del (gfm)\n      if ((cap = this.rules.del.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += this.renderer.del(this.output(cap[1]))\n        continue\n      }\n\n      // text\n      if ((cap = this.rules.text.exec(src))) {\n        src = src.substring(cap[0].length)\n        out += this.renderer.text(escape(this.smartypants(cap[0])))\n        continue\n      }\n\n      if (src) {\n        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0))\n      }\n    }\n\n    return out\n  }\n\n  outputLink(cap, link) {\n    const href = escape(link.href)\n    const title = link.title ? escape(link.title) : null\n\n    return cap[0].charAt(0) === '!'\n      ? this.renderer.image(href, title, escape(cap[1]))\n      : this.renderer.link(href, title, this.output(cap[1]))\n  }\n\n  smartypants(text) {\n    if (!this.options.smartypants) return text\n    return (\n      text\n        // em-dashes\n        .replace(/---/g, '\\u2014')\n        // en-dashes\n        .replace(/--/g, '\\u2013')\n        // opening singles\n        .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n        // closing singles & apostrophes\n        .replace(/'/g, '\\u2019')\n        // opening doubles\n        .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n        // closing doubles\n        .replace(/\"/g, '\\u201d')\n        // ellipses\n        .replace(/\\.{3}/g, '\\u2026')\n    )\n  }\n\n  mangle(text) {\n    if (!this.options.mangle) return text\n    let out = ''\n    let i = 0\n    let ch\n\n    for (; i < text.length; i++) {\n      ch = text.charCodeAt(i)\n      if (Math.random() > 0.5) {\n        ch = 'x' + ch.toString(16)\n      }\n      out += '&#' + ch + ';'\n    }\n\n    return out\n  }\n}\n\nInlineLexer.rules = inlineRules\n\nexport default InlineLexer\n","import defaultOptions from './defaults'\nimport InlineLexer from './inline-lexer'\nimport Renderer from './renderer'\n\n/**\n * Parsing & Compiling\n */\n\nexport default class Parser {\n  constructor(options = defaultOptions) {\n    this.tokens = []\n    this.token = null\n    this.options = options\n    this.options.renderer = this.options.renderer || new Renderer()\n    this.renderer = this.options.renderer\n    this.renderer.options = this.options\n  }\n\n  static parse(src, options, renderer) {\n    return new Parser(options, renderer).parse(src)\n  }\n\n  /**\n   * Parse Loop\n   */\n\n  parse(src) {\n    this.inline = new InlineLexer(src.links, this.options, this.renderer)\n    this.tokens = src.reverse()\n\n    let out = ''\n    while (this.next()) {\n      out += this.tok()\n    }\n\n    // Remove cached headings\n    this.renderer._headings = []\n    return out\n  }\n\n  /**\n   * Next Token\n   */\n\n  next() {\n    this.token = this.tokens.pop()\n    return this.token\n  }\n\n  /**\n   * Preview Next Token\n   */\n\n  peek() {\n    return this.tokens[this.tokens.length - 1] || 0\n  }\n\n  /**\n   * Parse Text Tokens\n   */\n\n  parseText() {\n    let body = this.token.text\n\n    while (this.peek().type === 'text') {\n      body += `\\n${this.next().text}`\n    }\n\n    return this.inline.output(body)\n  }\n\n  /**\n   * Parse Current Token\n   */\n\n  tok() {\n    switch (this.token.type) {\n      case 'space': {\n        return ''\n      }\n      case 'hr': {\n        return this.renderer.hr()\n      }\n      case 'heading': {\n        return this.renderer.heading(\n          this.inline.output(this.token.text),\n          this.token.depth,\n          this.token.text\n        )\n      }\n      case 'code': {\n        return this.renderer.code(\n          this.token.text,\n          this.token.lang,\n          this.token.escaped\n        )\n      }\n      case 'table': {\n        let header = ''\n        let body = ''\n        let i\n        let row\n        let cell\n        let j\n\n        // header\n        cell = ''\n        for (i = 0; i < this.token.header.length; i++) {\n          cell += this.renderer.tablecell(\n            this.inline.output(this.token.header[i]),\n            { header: true, align: this.token.align[i] }\n          )\n        }\n        header += this.renderer.tablerow(cell)\n\n        for (i = 0; i < this.token.cells.length; i++) {\n          row = this.token.cells[i]\n\n          cell = ''\n          for (j = 0; j < row.length; j++) {\n            cell += this.renderer.tablecell(this.inline.output(row[j]), {\n              header: false,\n              align: this.token.align[j]\n            })\n          }\n\n          body += this.renderer.tablerow(cell)\n        }\n        return this.renderer.table(header, body)\n      }\n      case 'blockquote_start': {\n        let body = ''\n\n        while (this.next().type !== 'blockquote_end') {\n          body += this.tok()\n        }\n\n        return this.renderer.blockquote(body)\n      }\n      case 'list_start': {\n        let body = ''\n        let taskList = false\n        const ordered = this.token.ordered\n\n        while (this.next().type !== 'list_end') {\n          if (this.token.checked !== undefined) {\n            taskList = true\n          }\n          body += this.tok()\n        }\n\n        return this.renderer.list(body, ordered, taskList)\n      }\n      case 'list_item_start': {\n        let body = ''\n        const checked = this.token.checked\n\n        while (this.next().type !== 'list_item_end') {\n          body += this.token.type === 'text' ? this.parseText() : this.tok()\n        }\n\n        return this.renderer.listitem(body, checked)\n      }\n      case 'loose_item_start': {\n        let body = ''\n        const checked = this.token.checked\n\n        while (this.next().type !== 'list_item_end') {\n          body += this.tok()\n        }\n\n        return this.renderer.listitem(body, checked)\n      }\n      case 'html': {\n        const html =\n          !this.token.pre && !this.options.pedantic\n            ? this.inline.output(this.token.text)\n            : this.token.text\n        return this.renderer.html(html)\n      }\n      case 'paragraph': {\n        return this.renderer.paragraph(this.inline.output(this.token.text))\n      }\n      case 'text': {\n        return this.renderer.paragraph(this.parseText())\n      }\n      default: {\n        throw new Error('Unknow type')\n      }\n    }\n  }\n}\n","import { merge, noop, replace } from './utils'\n\nconst block = {\n  newline: /^\\n+/,\n  code: /^( {4}[^\\n]+\\n*)+/,\n  fences: noop,\n  hr: /^( *[-*_]){3,} *(?:\\n+|$)/,\n  heading: /^ *(#{1,6}) *([^\\n]+?) *#* *(?:\\n+|$)/,\n  nptable: noop,\n  lheading: /^([^\\n]+)\\n *(=|-){2,} *(?:\\n+|$)/,\n  blockquote: /^( *>[^\\n]+(\\n(?!def)[^\\n]+)*\\n*)+/,\n  list: /^( *)(bull) [\\s\\S]+?(?:hr|def|\\n{2,}(?! )(?!\\1bull )\\n*|\\s*$)/,\n  html: /^ *(?:comment *(?:\\n|\\s*$)|closed *(?:\\n{2,}|\\s*$)|closing *(?:\\n{2,}|\\s*$))/,\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +[\"(]([^\\n]+)[\")])? *(?:\\n+|$)/,\n  table: noop,\n  paragraph: /^((?:[^\\n]+\\n?(?!hr|heading|lheading|blockquote|tag|def))+)\\n*/,\n  text: /^[^\\n]+/\n}\n\nblock.bullet = /(?:[*+-]|\\d+\\.)/\nblock.item = /^( *)(bull) [^\\n]*(?:\\n(?!\\1bull )[^\\n]*)*/\nblock.item = replace(block.item, 'gm')(/bull/g, block.bullet)()\n\nblock.list = replace(block.list)(/bull/g, block.bullet)(\n  'hr',\n  '\\\\n+(?=\\\\1?(?:[-*_] *){3,}(?:\\\\n+|$))'\n)('def', '\\\\n+(?=' + block.def.source + ')')()\n\nblock.blockquote = replace(block.blockquote)('def', block.def)()\n\nblock._tag =\n  '(?!(?:' +\n  'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code' +\n  '|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo' +\n  '|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:/|[^\\\\w\\\\s@]*@)\\\\b'\n\nblock.html = replace(block.html)('comment', /<!--[\\s\\S]*?-->/)(\n  'closed',\n  /<(tag)[\\s\\S]+?<\\/\\1>/\n)('closing', /<tag(?:\"[^\"]*\"|'[^']*'|[^'\">])*?>/)(/tag/g, block._tag)()\n\nblock.paragraph = replace(block.paragraph)('hr', block.hr)(\n  'heading',\n  block.heading\n)('lheading', block.lheading)('blockquote', block.blockquote)(\n  'tag',\n  '<' + block._tag\n)('def', block.def)()\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = merge({}, block)\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = merge({}, block.normal, {\n  fences: /^ *(`{3,}|~{3,})[ \\.]*(\\S+)? *\\n([\\s\\S]*?)\\s*\\1 *(?:\\n+|$)/,\n  paragraph: /^/,\n  heading: /^ *(#{1,6}) +([^\\n]+?) *#* *(?:\\n+|$)/,\n  checkbox: /^\\[([ x])\\] +/\n})\n\nblock.gfm.paragraph = replace(block.paragraph)(\n  '(?!',\n  '(?!' +\n    block.gfm.fences.source.replace('\\\\1', '\\\\2') +\n    '|' +\n    block.list.source.replace('\\\\1', '\\\\3') +\n    '|'\n)()\n\n/**\n * GFM + Tables Block Grammar\n */\n\nblock.tables = merge({}, block.gfm, {\n  nptable: /^ *(\\S.*\\|.*)\\n *([-:]+ *\\|[-| :]*)\\n((?:.*\\|.*(?:\\n|$))*)\\n*/,\n  table: /^ *\\|(.+)\\n *\\|( *[-:]+[-| :]*)\\n((?: *\\|.*(?:\\n|$))*)\\n*/\n})\n\nexport default block\n","import blockRules from './block-rules'\nimport defaultOptions from './defaults'\n\nclass Lexer {\n  constructor(options = defaultOptions) {\n    this.tokens = []\n    this.tokens.links = {}\n    this.options = options\n\n    if (this.options.gfm) {\n      if (this.options.tables) {\n        this.rules = blockRules.tables\n      } else {\n        this.rules = blockRules.gfm\n      }\n    } else {\n      this.rules = blockRules.normal\n    }\n  }\n\n  static lex(src, options) {\n    return new Lexer(options).lex(src)\n  }\n\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n')\n      .replace(/\\t/g, '    ')\n      .replace(/\\u00a0/g, ' ')\n      .replace(/\\u2424/g, '\\n')\n\n    return this.token(src, true)\n  }\n\n  token(src, top, bq) {\n    src = src.replace(/^ +$/gm, '')\n\n    let next\n    let loose\n    let cap\n    let bull\n    let b\n    let item\n    let space\n    let i\n    let l\n    let checked\n\n    while (src) {\n      // newline\n      if ((cap = this.rules.newline.exec(src))) {\n        src = src.substring(cap[0].length)\n        if (cap[0].length > 1) {\n          this.tokens.push({\n            type: 'space'\n          })\n        }\n      }\n\n      // code\n      if ((cap = this.rules.code.exec(src))) {\n        src = src.substring(cap[0].length)\n        cap = cap[0].replace(/^ {4}/gm, '')\n        this.tokens.push({\n          type: 'code',\n          text: this.options.pedantic ? cap : cap.replace(/\\n+$/, '')\n        })\n        continue\n      }\n\n      // fences (gfm)\n      if ((cap = this.rules.fences.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: 'code',\n          lang: cap[2],\n          text: cap[3] || ''\n        })\n        continue\n      }\n\n      // heading\n      if ((cap = this.rules.heading.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: 'heading',\n          depth: cap[1].length,\n          text: cap[2]\n        })\n        continue\n      }\n\n      // table no leading pipe (gfm)\n      if (top && (cap = this.rules.nptable.exec(src))) {\n        src = src.substring(cap[0].length)\n\n        item = {\n          type: 'table',\n          header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          cells: cap[3].replace(/\\n$/, '').split('\\n')\n        }\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right'\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center'\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left'\n          } else {\n            item.align[i] = null\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = item.cells[i].split(/ *\\| */)\n        }\n\n        this.tokens.push(item)\n\n        continue\n      }\n\n      // lheading\n      if ((cap = this.rules.lheading.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: 'heading',\n          depth: cap[2] === '=' ? 1 : 2,\n          text: cap[1]\n        })\n        continue\n      }\n\n      // hr\n      if ((cap = this.rules.hr.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: 'hr'\n        })\n        continue\n      }\n\n      // blockquote\n      if ((cap = this.rules.blockquote.exec(src))) {\n        src = src.substring(cap[0].length)\n\n        this.tokens.push({\n          type: 'blockquote_start'\n        })\n\n        cap = cap[0].replace(/^ *> ?/gm, '')\n\n        // Pass `top` to keep the current\n        // \"toplevel\" state. This is exactly\n        // how markdown.pl works.\n        this.token(cap, top, true)\n\n        this.tokens.push({\n          type: 'blockquote_end'\n        })\n\n        continue\n      }\n\n      // list\n      if ((cap = this.rules.list.exec(src))) {\n        src = src.substring(cap[0].length)\n        bull = cap[2]\n\n        this.tokens.push({\n          type: 'list_start',\n          ordered: bull.length > 1\n        })\n\n        // Get each top-level item.\n        cap = cap[0].match(this.rules.item)\n\n        next = false\n        l = cap.length\n        i = 0\n\n        for (; i < l; i++) {\n          item = cap[i]\n\n          // Remove the list item's bullet\n          // so it is seen as the next token.\n          space = item.length\n          item = item.replace(/^ *([*+-]|\\d+\\.) +/, '')\n\n          if (this.options.gfm && this.options.taskLists) {\n            checked = this.rules.checkbox.exec(item)\n\n            if (checked) {\n              checked = checked[1] === 'x'\n              item = item.replace(this.rules.checkbox, '')\n            } else {\n              checked = undefined\n            }\n          }\n\n          // Outdent whatever the\n          // list item contains. Hacky.\n          if (item.indexOf('\\n ') !== -1) {\n            space -= item.length\n            item = this.options.pedantic\n              ? item.replace(/^ {1,4}/gm, '')\n              : item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')\n          }\n\n          // Determine whether the next list item belongs here.\n          // Backpedal if it does not belong in this list.\n          if (this.options.smartLists && i !== l - 1) {\n            b = this.rules.bullet.exec(cap[i + 1])[0]\n            if (bull !== b && !(bull.length > 1 && b.length > 1)) {\n              src = cap.slice(i + 1).join('\\n') + src\n              i = l - 1\n            }\n          }\n\n          // Determine whether item is loose or not.\n          // Use: /(^|\\n)(?! )[^\\n]+\\n\\n(?!\\s*$)/\n          // for discount behavior.\n          loose = next || /\\n\\n(?!\\s*$)/.test(item)\n          if (i !== l - 1) {\n            next = item.charAt(item.length - 1) === '\\n'\n            if (!loose) loose = next\n          }\n\n          this.tokens.push({\n            checked,\n            type: loose ? 'loose_item_start' : 'list_item_start'\n          })\n\n          // Recurse.\n          this.token(item, false, bq)\n\n          this.tokens.push({\n            type: 'list_item_end'\n          })\n        }\n\n        this.tokens.push({\n          type: 'list_end'\n        })\n\n        continue\n      }\n\n      // html\n      if ((cap = this.rules.html.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: this.options.sanitize ? 'paragraph' : 'html',\n          pre:\n            !this.options.sanitizer &&\n            (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n          text: cap[0]\n        })\n        continue\n      }\n\n      // def\n      if (!bq && top && (cap = this.rules.def.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.links[cap[1].toLowerCase()] = {\n          href: cap[2],\n          title: cap[3]\n        }\n        continue\n      }\n\n      // table (gfm)\n      if (top && (cap = this.rules.table.exec(src))) {\n        src = src.substring(cap[0].length)\n\n        item = {\n          type: 'table',\n          header: cap[1].replace(/^ *| *\\| *$/g, '').split(/ *\\| */),\n          align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n          cells: cap[3].replace(/(?: *\\| *)?\\n$/, '').split('\\n')\n        }\n\n        for (i = 0; i < item.align.length; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right'\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center'\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left'\n          } else {\n            item.align[i] = null\n          }\n        }\n\n        for (i = 0; i < item.cells.length; i++) {\n          item.cells[i] = item.cells[i]\n            .replace(/^ *\\| *| *\\| *$/g, '')\n            .split(/ *\\| */)\n        }\n\n        this.tokens.push(item)\n\n        continue\n      }\n\n      // top-level paragraph\n      if (top && (cap = this.rules.paragraph.exec(src))) {\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: 'paragraph',\n          text:\n            cap[1].charAt(cap[1].length - 1) === '\\n'\n              ? cap[1].slice(0, -1)\n              : cap[1]\n        })\n        continue\n      }\n\n      // text\n      if ((cap = this.rules.text.exec(src))) {\n        // Top-level should never reach here.\n        src = src.substring(cap[0].length)\n        this.tokens.push({\n          type: 'text',\n          text: cap[0]\n        })\n        continue\n      }\n\n      if (src) {\n        throw new Error('Infinite loop on byte: ' + src.charCodeAt(0))\n      }\n    }\n\n    return this.tokens\n  }\n}\n\nLexer.rules = blockRules\n\nexport default Lexer\n","import { merge, escape } from './utils'\nimport defaultOptions from './defaults'\nimport Parser from './parser'\nimport Lexer from './lexer'\nimport Renderer from './renderer'\nimport InlineLexer from './inline-lexer'\n\nfunction marked3(src, opt) {\n  try {\n    if (opt) opt = merge({}, defaultOptions, opt)\n    return Parser.parse(Lexer.lex(src, opt), opt)\n  } catch (err) {\n    err.message += '\\nPlease report this to https://github.com/egoist/marked3.'\n    if ((opt || defaultOptions).silent) {\n      return (\n        '<p>An error occurred:</p><pre>' +\n        escape(String(err.message), true) +\n        '</pre>'\n      )\n    }\n    throw err\n  }\n}\n\nmarked3.Renderer = Renderer\nmarked3.Parser = Parser\nmarked3.Lexer = Lexer\nmarked3.InlineLexer = InlineLexer\n\nexport default marked3\n"],"names":["merge","obj","target","key","i","arguments","length","Object","prototype","hasOwnProperty","call","noop","escape","html","encode","replace","regex","opt","source","self","name","val","RegExp","exec","module","input","toLowerCase","Renderer","options","_headings","code","lang","escaped","this","highlight","out","blockquote","quote","heading","text","level","raw","slug","slugo","count","filter","h","push","hr","xhtml","list","body","ordered","taskList","type","listitem","checked","undefined","paragraph","table","header","tablerow","content","tablecell","flags","align","strong","em","codespan","br","del","link","href","title","sanitize","prot","decodeURIComponent","_","n","charAt","String","fromCharCode","parseInt","substring","Number","err","indexOf","linksInNewTab","image","inline","_inside","_href","reflink","normal","pedantic","gfm","breaks","InlineLexer","links","defaultOptions","renderer","Error","rules","inlineRules","output","src","cap","autolink","mangle","inLink","url","tag","test","sanitizer","outputLink","nolink","smartypants","charCodeAt","ch","Math","random","toString","Parser","tokens","token","parse","reverse","next","tok","pop","peek","parseText","depth","row","cell","j","cells","pre","const","block","item","bullet","def","_tag","lheading","fences","tables","Lexer","blockRules","marked3","lex","message","silent","top","bq","loose","bull","b","space","l","newline","nptable","split","match","taskLists","checkbox","smartLists","slice","join"],"mappings":"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"}